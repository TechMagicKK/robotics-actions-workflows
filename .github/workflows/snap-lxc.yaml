name: build-install-test-snap-lxc

on:
  workflow_call:
    inputs:
      lxc-image:
        required: true
        type: string
      ubuntu-image:
        required: false
        type: string
        default: "ubuntu-latest"
      snapcraft-channel:
        required: false
        type: string
        default: "latest/stable"
      snap-name:
        required: true
        type: string
      branch-name:
        required: true
        type: string
      snapcraft-args:
        required: false
        type: string
      snapcraft-build-path:
        required: false
        type: string
        default: "."
      snap-install-args:
        required: false
        type: string
        default: "--dangerous"
      enable-experimental-extensions-env:
        required: false
        type: boolean
      publish:
        description: "whether to publish the snap to the store"
        required: false
        type: boolean
        default: false
      publish-track:
        description: "Snap Store channel track use for publication"
        required: false
        type: string
        default: latest
      cleanup:
        description: "whether to cleanup artifacts"
        required: false
        type: boolean
      test-script:
        description: "Custom script to run some custom snap testing"
        required: false
        type: string
    secrets:
      store-login:
        description: "Snap Store credential exported with snapcraft export-login"
        required: false

jobs:
  build:
    uses: canonical/robotics-actions-workflows/.github/workflows/snap.yaml@main
    with:
      ubuntu-image: ${{ inputs.ubuntu-image }}
      snapcraft-channel: ${{ inputs.snapcraft-channel }}
      branch-name: ${{ inputs.branch-name }}
      snapcraft-args: ${{ inputs.snapcraft-args }}
      snapcraft-build-path: ${{ inputs.snapcraft-build-path }}
      snap-name: ${{ inputs.snap-name }}
      enable-experimental-extensions-env: ${{ inputs.enable-experimental-extensions-env }}
      cleanup: false # necessary so next job can pick the artifact
    secrets:
      store-login: ${{ secrets.store-login }}

  test-on-lxc:
    runs-on: "${{ fromJSON(needs.build.outputs.runs-on-params) }}"
    needs: build
    steps:
    - uses: actions/download-artifact@v4
      name: ${{ needs.build.outputs.snap-artifact-name }}-${{ needs.build.outputs.upload-branch-name }}
      with:
        path: .
    - name: Setup LXD
      uses: canonical/setup-lxd@v0.1.1
    - name: Launch container
      run: |
        lxc launch '${{ inputs.lxc-image }}' lxc-container
        lxc exec lxc-container -- cloud-init status --wait
        until lxc exec lxc-container -- getent passwd ubuntu; do
          echo "Waiting for the ubuntu user."
          sleep 0.25
        done
    - name: Push snap to lxc container
      run: |
        lxc file push ${{ needs.build.outputs.snap-artifact-name }}-${{ needs.build.outputs.upload-branch-name }}/${{ needs.build.outputs.snap-file }} lxc-container/home/ubuntu/
    - name: Install snap
      env:
        SNAPCRAFT_INSTALL_ARGS : '${{ inputs.snap-install-args }}'
      run: |
        lxc exec lxc-container -- sh -c "snap install /home/ubuntu/${{ needs.build.outputs.snap-file }} ${{ env.SNAPCRAFT_INSTALL_ARGS }}"

    - name: Run custom test script
      shell: bash
      run: |
        cat > test-script.sh << 'EOF'
          ${{ inputs.test-script }}
        EOF
        lxc file push test-script.sh lxc-container/home/ubuntu/
        lxc exec --user 1000 --env HOME=/home/ubuntu --cwd /home/ubuntu lxc-container -- sh -c "bash /home/ubuntu/test-script.sh"

  publish:
    if: inputs.publish == true
    runs-on: ubuntu-latest
    needs: [build, test-on-lxc]
    steps:
    - name: Download snap artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ needs.build.outputs.snap-artifact-name }}-${{needs.build.outputs.upload-branch-name}}
        path: ${{ inputs.snapcraft-build-path }}
    - name: Publish snap
      uses: canonical/action-publish@v1
      env:
        SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.store-login }}
      if: env.SNAPCRAFT_STORE_CREDENTIALS
      with:
        snap: ${{ needs.build.outputs.snap-file }}
        release: ${{ inputs.publish-track }}/${{ startsWith(github.ref, 'refs/tags/') && 'candidate' || 'edge'}}


  cleanup:
    if: ${{ always() && !cancelled() && needs.build.result == 'success' && inputs.cleanup == true }}
    runs-on: ubuntu-latest
    needs: [build, test-on-lxc, publish]
    steps:
      - name: Delete artifact
        uses: geekyeggo/delete-artifact@v4
        with:
          name: ${{ inputs.snap-name }}-*
